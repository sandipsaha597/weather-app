{"version":3,"sources":["components/ShowWeather.js","App.js","serviceWorker.js","index.js"],"names":["ShowWeather","state","current_city","current_country","location","temp_c","options","dataLabels","enabled","stroke","curve","title","text","align","style","fontSize","xaxis","type","axisBorder","show","axisTicks","yaxis","tickAmount","floating","labels","color","offsetY","offsetX","fill","opacity","tooltip","x","format","fixed","position","grid","lines","padding","left","series","name","data","y","errors","forecast","getTemp","setState","console","log","axios","get","then","res","c","main","temp","sys","country","Math","round","e","whetherForecast","catch","err","handleChange","target","value","this","window","innerWidth","city","k","results","geometry","lat","lng","date","Date","daily","map","index","setDate","getDate","o","day","min","max","night","eve","morn","push","toDateString","current_region","className","TextField","id","label","onChange","Button","variant","styles","button","onClick","height","width","Component","marginLeft","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kUASMA,E,2MACJC,MAAQ,CACNC,aAAc,aAEdC,gBAAiB,GACjBC,SAAU,aACVC,OAAQ,aACRC,QAAS,CACPC,WAAY,CACVC,SAAS,GAEXC,OAAQ,CACNC,MAAO,UAGTC,MAAO,CACLC,KAAM,mBACNC,MAAO,OACPC,MAAO,CACLC,SAAU,SAGdC,MAAO,CACLC,KAAM,WAENC,WAAY,CACVC,MAAM,GAERC,UAAW,CACTD,MAAM,IAGVE,MAAO,CACLC,WAAY,EACZC,UAAU,EAEVC,OAAQ,CACNV,MAAO,CACLW,MAAO,WAETC,SAAU,EACVC,QAAS,GAEXT,WAAY,CACVC,MAAM,GAERC,UAAW,CACTD,MAAM,IAGVS,KAAM,CACJC,QAAS,IAEXC,QAAS,CACPC,EAAG,CACDC,OAAQ,UAEVC,MAAO,CACLzB,SAAS,EACT0B,SAAU,aAGdC,KAAM,CACJd,MAAO,CACLe,MAAO,CACLT,SAAU,KAGdU,QAAS,CACPC,KAAM,MAIZC,OAAQ,CAAC,CACPC,KAAM,UACNC,KAAM,CAAC,CACHV,EAAG,kBACHW,EAAG,GAEL,CACEX,EAAG,kBACHW,EAAG,GAEL,CACEX,EAAG,kBACHW,EAAG,GAEL,CACEX,EAAG,kBACHW,EAAG,GAEL,CACEX,EAAG,kBACHW,EAAG,GAEL,CACEX,EAAG,kBACHW,EAAG,GAEL,CACEX,EAAG,kBACHW,EAAG,MAITC,OAAQ,CACNvC,SAAU,GACVwC,SAAU,K,EA2GdC,QAAU,WAER,EAAKC,SAAS,CACZ5C,aAAc,aACdG,OAAQ,eAEV0C,QAAQC,IAAI,EAAK/C,MAAMG,UAEvB6C,IAAMC,IAAN,4DAA+D,EAAKjD,MAAMG,SAA1E,4CACG+C,MAAK,SAAAC,GACJ,IAAIC,EAAID,EAAIX,KAAKa,KAAKC,KAAO,OAE7B,EAAKT,SAAS,CACZ5C,aAAckD,EAAIX,KAAKD,KAEvBrC,gBAAiBiD,EAAIX,KAAKe,IAAIC,QAC9BpD,OAAQqD,KAAKC,MAAU,GAAJN,GAAU,GAC7BV,OAAQ,CACNvC,SAAU,MAEX,SAAAwD,GAAC,OAAI,EAAKC,wBAEdC,OAAM,SAACC,GACN,EAAKjB,SAAS,CACZH,OAAQ,CACNvC,SAAS,IAAD,OAAM,EAAKH,MAAMG,SAAjB,uB,EAOlB4D,aAAe,SAAAJ,GAEb,EAAKd,SAAS,CAAC1C,SAAUwD,EAAEK,OAAOC,QAAQ,SAAAN,GAAC,OAAIb,QAAQC,IAAI,EAAK/C,MAAMG,c,oFAvItE+D,KAAK/D,WACFgE,OAAOC,WAAa,KACrBF,KAAKrB,SAAS,CACZxC,QAAS,CACPC,WAAY,CACVC,SAAS,GAEXC,OAAQ,CACNC,MAAO,UAGTC,MAAO,CACLC,KAAM,mBACNC,MAAO,SACPC,MAAO,CACLC,SAAU,SAGdC,MAAO,CACLC,KAAM,WAENC,WAAY,CACVC,MAAM,GAERC,UAAW,CACTD,MAAM,IAGVE,MAAO,CACLC,WAAY,EACZC,UAAU,EAEVC,OAAQ,CACNV,MAAO,CACLW,MAAO,WAETC,SAAU,EACVC,QAAS,GAEXT,WAAY,CACVC,MAAM,GAERC,UAAW,CACTD,MAAM,IAGVS,KAAM,CACJC,QAAS,IAEXC,QAAS,CACPC,EAAG,CACDC,OAAQ,UAEVC,MAAO,CACLzB,SAAS,EACT0B,SAAU,aAGdC,KAAM,CACJd,MAAO,CACLe,MAAO,CACLT,SAAU,KAGdU,QAAS,CACPC,KAAM,U,iCAQN,IAAD,OACTW,IAAMC,IAAN,8BACGC,MAAK,SAAAC,GAEJ,EAAKN,SAAS,CAAC1C,SAAUgD,EAAIX,KAAK6B,OAAO,SAAAV,GAAC,OAAI,EAAKf,aACnDE,QAAQC,IAAI,EAAK/C,MAAMG,aAGxB0D,OAAM,SAACC,GAAD,OAAShB,QAAQC,IAAI,uB,6BAK5BC,IAAMC,IAAN,oGACGC,MAAK,SAAAC,GACFL,QAAQC,IAAII,GACZL,QAAQC,IAAII,EAAIX,KAAKa,KAAKC,SAE7BO,OAAM,SAACC,GACJhB,QAAQC,IAAIe,Q,sCAKNQ,M,wCA2CG,IAAD,OAChBtB,IAAMC,IAAN,yDAA4DiB,KAAKlE,MAAMG,SAAvE,0CACC+C,MAAM,SAAAC,GAELL,QAAQC,IAAII,EAAIX,KAAK+B,QAAQ,GAAGC,UAChCxB,IAAMC,IAAN,8DAAiEE,EAAIX,KAAK+B,QAAQ,GAAGC,SAASC,IAA9F,gBAAyGtB,EAAIX,KAAK+B,QAAQ,GAAGC,SAASE,IAAtI,4CACCxB,MAAK,SAAAC,GACJ,IAAIG,EAAO,GACPqB,EAAO,IAAIC,KAEfzB,EAAIX,KAAKqC,MAAMC,KAAI,SAACb,EAAOc,GACzB,GAAc,IAAVA,EAAa,CACfJ,EAAKK,QAAQL,EAAKM,UAAY,GAE9B,IAAIC,GAAKjB,EAAMX,KAAK6B,IAAMlB,EAAMX,KAAK8B,IAAMnB,EAAMX,KAAK+B,IAAMpB,EAAMX,KAAKgC,MAAQrB,EAAMX,KAAKiC,IAAMtB,EAAMX,KAAKkC,MAAQ,EACnHlC,EAAKmC,KAAK,CAAC3D,EAAG6C,EAAKe,eAAgBjD,EAAGgB,KAAKC,MAAMwB,EAAI,cAIzD,EAAKrC,SAAS,CACZP,OAAQ,CAAC,CACPE,KAAMc,SAITO,OAAM,SAACC,GAAD,OAAShB,QAAQC,IAAI,uBAAwBe,W,+BAKhD,IAAD,EACyEI,KAAKlE,MAAhFI,EADE,EACFA,OAAQH,EADN,EACMA,aAA8BC,GADpC,EACoByF,eADpB,EACoCzF,iBAAiBwC,EADrD,EACqDA,OAAQvC,EAD7D,EAC6DA,SACpE,OACE,yBAAKyF,UAAU,yBACX,yBAAKA,UAAU,QAEb,kBAACC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAM,kBAAkBC,SAAU9B,KAAKH,aAAcE,MAAO9D,IAO3F,kBAAC8F,EAAA,EAAD,CAAQC,QAAQ,YACf1E,MAAM,UACNX,MAAOsF,EAAOC,OACdC,QAASnC,KAAKtB,SAHf,aAOJ,2BAAIF,EAAOvC,UACX,yBAAKyF,UAAU,UACb,wCAAc3F,EAAd,KAA8BC,GAC9B,sCAAYE,IAEd,kBAAC,IAAD,CACEC,QAAS6D,KAAKlE,MAAMK,QACpBiC,OAAQ4B,KAAKlE,MAAMsC,OACnBtB,KAAK,OACLsF,OAAO,MACPC,MAAM,c,GAzTUC,aAgUpBL,EAAS,CACbC,OAAQ,CACNK,WAAY,SAID1G,IC/TA2G,MAXf,WACE,OACE,yBAAKd,UAAU,OACb,yBAAKA,UAAU,aACb,2CACA,kBAAC,EAAD,SCEYe,QACW,cAA7BxC,OAAOhE,SAASyG,UAEe,UAA7BzC,OAAOhE,SAASyG,UAEhBzC,OAAOhE,SAASyG,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlE,MAAK,SAAAmE,GACJA,EAAaC,gBAEdzD,OAAM,SAAA0D,GACLzE,QAAQyE,MAAMA,EAAMC,c","file":"static/js/main.f93f71fd.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport Chart from 'react-apexcharts'\r\n// import MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider'\r\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\n// import RaisedButton from 'material-ui/RaisedButton'\r\nimport Button from '@material-ui/core/Button'\r\n\r\nclass ShowWeather extends Component {\r\n  state = {\r\n    current_city: 'Loading...',\r\n    // current_region: '',\r\n    current_country: '',\r\n    location: 'Loading...',\r\n    temp_c: 'Loading...',\r\n    options: {\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth'\r\n      },\r\n\r\n      title: {\r\n        text: 'Weather forecast',\r\n        align: 'left',\r\n        style: {\r\n          fontSize: '20px'\r\n        }\r\n      },\r\n      xaxis: {\r\n        type: 'datetime',\r\n\r\n        axisBorder: {\r\n          show: false\r\n        },\r\n        axisTicks: {\r\n          show: false\r\n        }\r\n      },\r\n      yaxis: {\r\n        tickAmount: 4,\r\n        floating: false,\r\n\r\n        labels: {\r\n          style: {\r\n            color: '#8e8da4',\r\n          },\r\n          offsetY: -7,\r\n          offsetX: 0,\r\n        },\r\n        axisBorder: {\r\n          show: false,\r\n        },\r\n        axisTicks: {\r\n          show: false\r\n        }\r\n      },\r\n      fill: {\r\n        opacity: 0.5,\r\n      },\r\n      tooltip: {\r\n        x: {\r\n          format: \"dd MMM\",\r\n        },\r\n        fixed: {\r\n          enabled: false,\r\n          position: 'topRight'\r\n        }\r\n      },\r\n      grid: {\r\n        yaxis: {\r\n          lines: {\r\n            offsetX: -30\r\n          }\r\n        },\r\n        padding: {\r\n          left: 20\r\n        }\r\n      }\r\n    },\r\n    series: [{\r\n      name: 'Temp(C)',\r\n      data: [{\r\n          x: \"sat Apr 18 2020\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"sat Apr 19 2020\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"sat Apr 20 2020\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"sat Apr 21 2020\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"sat Apr 22 2020\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"sat Apr 23 2020\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"sat Apr 24 2020\",\r\n          y: 0\r\n        },\r\n      ]\r\n    }],\r\n    errors: {\r\n      location: '',\r\n      forecast: '',\r\n    }\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n    this.location()\r\n    if(window.innerWidth > 580) {\r\n      this.setState({\r\n        options: {\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: 'smooth'\r\n          },\r\n\r\n          title: {\r\n            text: 'Weather forecast',\r\n            align: 'center',\r\n            style: {\r\n              fontSize: '20px'\r\n            }\r\n          },\r\n          xaxis: {\r\n            type: 'datetime',\r\n\r\n            axisBorder: {\r\n              show: false\r\n            },\r\n            axisTicks: {\r\n              show: false\r\n            }\r\n          },\r\n          yaxis: {\r\n            tickAmount: 4,\r\n            floating: false,\r\n\r\n            labels: {\r\n              style: {\r\n                color: '#8e8da4',\r\n              },\r\n              offsetY: -7,\r\n              offsetX: 0,\r\n            },\r\n            axisBorder: {\r\n              show: false,\r\n            },\r\n            axisTicks: {\r\n              show: false\r\n            }\r\n          },\r\n          fill: {\r\n            opacity: 0.5,\r\n          },\r\n          tooltip: {\r\n            x: {\r\n              format: \"dd MMM\",\r\n            },\r\n            fixed: {\r\n              enabled: false,\r\n              position: 'topRight'\r\n            }\r\n          },\r\n          grid: {\r\n            yaxis: {\r\n              lines: {\r\n                offsetX: -30\r\n              }\r\n            },\r\n            padding: {\r\n              left: 20\r\n            }\r\n          }\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  location() {\r\n    axios.get(`https://geoip-db.com/json/`)\r\n      .then(res => {\r\n        \r\n        this.setState({location: res.data.city}, e => this.getTemp() )\r\n        console.log(this.state.location);\r\n        \r\n      })\r\n      .catch((err) => console.log('Location error'))\r\n\r\n  }\r\n\r\n  temp() {\r\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=kolkata&appid=f31f28d7204a6328e3058775f2d14fc2`)\r\n        .then(res => {\r\n            console.log(res)\r\n            console.log(res.data.main.temp)\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n\r\n  }\r\n  \r\n  kelvinToCelcius(k) {\r\n    let c = k - 273.15 \r\n  }\r\n\r\n  getTemp = () => {\r\n    // e.preventDefault()\r\n    this.setState({\r\n      current_city: 'Loading...',\r\n      temp_c: 'Loading...'\r\n    })\r\n    console.log(this.state.location);\r\n    \r\n    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.location}&appid=f31f28d7204a6328e3058775f2d14fc2`)\r\n      .then(res => {\r\n        let c = res.data.main.temp - 273.15\r\n        \r\n        this.setState({\r\n          current_city: res.data.name,\r\n          // current_region: res.data.location.region,\r\n          current_country: res.data.sys.country,\r\n          temp_c: Math.round(c * 10) / 10,\r\n          errors: {\r\n            location: '',\r\n          },\r\n        }, e => this.whetherForecast() )\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          errors: {\r\n            location: `'${this.state.location}' NOT FOUND.`,\r\n          }\r\n        })\r\n      })\r\n\r\n  }\r\n\r\n  handleChange = e => {\r\n    // this.setState({[input]: e.target.value})\r\n    this.setState({location: e.target.value}, e => console.log(this.state.location))\r\n    \r\n    \r\n  }\r\n\r\n  whetherForecast() {\r\n    axios.get(`https://api.opencagedata.com/geocode/v1/json?q=${this.state.location}&key=2db49834c46c4179b8fa3bf2797312f8`)\r\n    .then( res => {\r\n\r\n      console.log(res.data.results[0].geometry);\r\n      axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${res.data.results[0].geometry.lat}&lon=${res.data.results[0].geometry.lng}&appid=e2762729c5e0341d4e2164e61e00fd04`)\r\n      .then(res => {\r\n        let temp = []\r\n        var date = new Date()\r\n        \r\n        res.data.daily.map((value, index) => {\r\n          if (index !== 0) {\r\n            date.setDate(date.getDate() + 1 )\r\n            \r\n            let o = (value.temp.day + value.temp.min + value.temp.max + value.temp.night + value.temp.eve + value.temp.morn) / 6\r\n            temp.push({x: date.toDateString(), y: Math.round(o - 273.15)})\r\n          }\r\n        })\r\n        \r\n        this.setState({\r\n          series: [{\r\n            data: temp\r\n          }]\r\n        })\r\n      })      \r\n        .catch((err) => console.log('weather forecast err', err))\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    let {temp_c, current_city, current_region, current_country, errors, location} = this.state\r\n    return (  \r\n      <div className=\"ShowWhether container\">\r\n          <div className=\"form\">\r\n            {/* <TextField hintText=\"Enter Your City\"  floatingLabelText=\"Enter Your City\" /> */}\r\n            <TextField id=\"standard-basic\" label=\"Enter Your City\" onChange={this.handleChange} value={location} />\r\n            {/* <RaisedButton\r\n              label=\"See Temp\"\r\n              primary={true}\r\n              style={styles.button}\r\n              onClick={this.seeTemp}\r\n            /> */}\r\n            <Button variant=\"contained\"\r\n             color=\"primary\"\r\n             style={styles.button}\r\n             onClick={this.getTemp}\r\n             >See Temp</Button>\r\n          </div>\r\n\r\n        <p>{errors.location}</p>\r\n        <div className=\"Output\">\r\n          <p>Location: {current_city}, {current_country}</p>\r\n          <p>Temp C: {temp_c}</p>\r\n        </div>\r\n        <Chart \r\n          options={this.state.options}\r\n          series={this.state.series}\r\n          type=\"area\"\r\n          height=\"450\"\r\n          width=\"100%\"\r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nconst styles = {\r\n  button: {\r\n    marginLeft: '15px'\r\n  }\r\n}\r\n\r\nexport default ShowWeather;\r\n","import React, { useState, useEffect } from 'react';\n// import ShowWhether from './components/ShowWhether'\nimport './App.css';\nimport ShowWeather from './components/ShowWeather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='container'>\n        <h1>Weather App</h1>\n        <ShowWeather/>\n      </div>\n    </div>\n  );\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}